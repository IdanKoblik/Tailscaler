name: Build

on:
  push:
    branches: [ "7-cicd" ]

permissions: write-all

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build API
        working-directory: ./api
        run: go build

      - name: Test API
        working-directory: ./api
        run: go test -v ./...

      - name: Build CLI
        working-directory: ./cli
        run: go build

      - name: Test CLI
        working-directory: ./cli
        run: go test -v ./...

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate tag
        id: generate_tag
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          TAG_NAME="v1.0.${{ github.run_number }}"
          echo "Generated TAG_NAME=${TAG_NAME}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "Pushed tag ${TAG_NAME} to origin"

      - name: List tags
        run: git tag -l

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Debug Create Release Output
        run: echo "${{ steps.create_release.outputs }}"

  build-for-release:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build API for Windows
        working-directory: ./api
        run: GOOS=windows GOARCH=amd64 go build -o api.exe

      - name: Build API for macOS
        working-directory: ./api
        run: GOOS=darwin GOARCH=amd64 go build -o api_mac

      - name: Build API for Linux
        working-directory: ./api
        run: GOOS=linux GOARCH=amd64 go build -o api_linux

      - name: Build CLI for Windows
        working-directory: ./cli
        run: GOOS=windows GOARCH=amd64 go build -o cli.exe

      - name: Build CLI for macOS
        working-directory: ./cli
        run: GOOS=darwin GOARCH=amd64 go build -o cli_mac

      - name: Build CLI for Linux
        working-directory: ./cli
        run: GOOS=linux GOARCH=amd64 go build -o cli_linux

      - name: Zip API binaries
        run: zip api-binaries.zip ./api/api.exe ./api/api_mac ./api/api_linux

      - name: Zip CLI binaries
        run: zip cli-binaries.zip ./cli/cli.exe ./cli/cli_mac ./cli/cli_linux

      - name: Debug API Binary Files
        run: ls -la ./api

      - name: Debug CLI Binary Files
        run: ls -la ./cli

      - name: List Contents of Working Directory
        run: ls -la

      - name: Upload API Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          asset_path: ./api-binaries.zip
          asset_name: api-binaries-${{ github.run_number }}.zip
          asset_content_type: application/zip

      - name: Upload CLI Release Artifact
        uses: actions/upload-artifact@v3.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          name: artifacts
          path:  ./cli-binaries.zip